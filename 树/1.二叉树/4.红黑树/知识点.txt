红黑树等价于2-3树
红色节点表示和他的父节点合在一起是2-3树中的3节点

红黑树是保持黑平衡(从任意一个节点到叶子节点所经过的黑色节点的个数是一样的)的二叉树，不是一颗平衡二叉树
进行添加和删除的操作要比AVL树要快，适用于经常需要添加和删除元素的场景
红黑树的最大高度是nlogn，所以查询要比AVL树要慢一点

红黑树添加节点的情况：
第一大类：向2节点添加元素
1.被添加节点添加进叶子节点的左边，直接添加即可
2.被添加节点添加进叶子节点的右边，进行左旋转，然后还要修改节点的颜色
第二大类：向3节点添加元素
1.被添加节点添加进3节点的最左边，这样变成了2-3树中的4节点，（红黑树中进行右旋转），
这样所有的节点应该变成黑色的，然后根节点需要向上融和，所以还要把根节点的颜色变为红色，这个过程称为颜色反转
根节点需要向上融和的原因：在2-3树中，当添加完元素后，如果节点是个四节点了，这样需要分解这个节点，然后将根节点向上融和
2.被添加节点添加进3节点的最右边，这样变成了2-3树中的4节点，（红黑树中进行左旋转），
这样所有的节点应该变成黑色的，然后根节点需要向上融和，所以还要把根节点的颜色变为红色，这个过程称为颜色反转
3.被添加节点添加进3节点的中间（1-3 ==>  1-2-3），这样变成了2-3树中的4节点，需要分解成三个二节点的树（红黑树中进行先左旋转再右旋转），
这样所有的节点应该变成黑色的，然后根节点需要向上融和，所以还要把根节点的颜色变为红色，这个过程称为颜色反转
红黑树中表示就是
    3                3                           3                    2
   /     ==>        /        ==>左旋转          /     ==>右旋转      /  \
  1                1                           2                    1    3
                    \                         /
                     2                       1
在递归到node为1时就会执行第一个if，然后进行左旋转，并返回节点1
然后当层递归就会结束，走不到其他if了，当递归到node为3时，才会走到第二个if，然后进行右旋转